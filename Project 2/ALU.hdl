// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not


CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
        Not(in = zx, out = setXZero);
        Not(in = zy, out = setYZero);

        // Set x to zero 
        And16(a = x, 
            b[0] = setXZero, b[1] = setXZero, b[2] = setXZero, b[3] = setXZero,
            b[4] = setXZero, b[5] = setXZero, b[6] = setXZero, b[7] = setXZero,
            b[8] = setXZero, b[9] = setXZero, b[10] = setXZero, b[11] = setXZero,
            b[12] = setXZero, b[13] = setXZero, b[14] = setXZero, b[15] = setXZero,
            out = step1x);

        // Negate x 
        Xor16(a = step1x,
            b[0] = nx, b[1] = nx, b[2] = nx, b[3] = nx,
            b[4] = nx, b[5] = nx, b[6] = nx, b[7] = nx,
            b[8] = nx, b[9] = nx, b[10] = nx, b[11] = nx,
            b[12] = nx, b[13] = nx, b[14] = nx, b[15] = nx,
            out = step2x);

        // Set y to zero
        And16(a = y, 
            b[0] = setYZero, b[1] = setYZero, b[2] = setYZero, b[3] = setYZero,
            b[4] = setYZero, b[5] = setYZero, b[6] = setYZero, b[7] = setYZero,
            b[8] = setYZero, b[9] = setYZero, b[10] = setYZero, b[11] = setYZero,
            b[12] = setYZero, b[13] = setYZero, b[14] = setYZero, b[15] = setYZero,
            out = step3y);

        // Negate y
        Xor16(a = step3y,
            b[0] = ny, b[1] = ny, b[2] = ny, b[3] = ny,
            b[4] = ny, b[5] = ny, b[6] = ny, b[7] = ny,
            b[8] = ny, b[9] = ny, b[10] = ny, b[11] = ny,
            b[12] = ny, b[13] = ny, b[14] = ny, b[15] = ny,
            out = step4y);

        //addition or bitwise and, f=1 = addition
        Add16(a = step2x, b = step4y, out = added);
        And16(a = step2x, b = step4y, out = anded);

        Mux16(a = anded, b = added, sel = f, out = step5);
        Not16(in = step5, out = notStep5);

        //finalize and set ng and zr
        Mux16(a = step5, b = notStep5, sel = no, out[15] = ng);
        Mux16(a = step5, b = notStep5, sel = no, out = final, out = out);

        Or16(a = final, b = false, out[0..7] = lowOr, out[8..15] = highOr);
        Or8Way(in = lowOr, out = lowZero);
        Or8Way(in = highOr, out = highZero);
        Or(a = lowZero, b = highZero, out = zero);
        Not(in = zero, out = zr);
}